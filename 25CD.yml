name: CD

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository

jobs:
  test_cpp:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Conan install
        run: pip install conan

      - name: Conan setup
        run: |
          conan profile new linksplatform --detect
          conan profile update settings.compiler=clang linksplatform
          conan profile update settings.compiler.version=13 linksplatform
          conan profile update settings.compiler.libcxx=libstdc++11 linksplatform
          conan profile update env.CXX=clang++ linksplatform
          conan profile show linksplatform
      - name: Conan install packages
        run: |
          git clone https://github.com/linksplatform/conan-center-index
          cd conan-center-index && git checkout only-development && cd recipes
          conan create platform.converters/all platform.converters/0.1.0@ -pr=linksplatform
          conan create platform.interfaces/all platform.interfaces/0.1.4@ -pr=linksplatform
          conan create platform.ranges/all platform.ranges/0.1.2@ -pr=linksplatform
          conan create platform.random/all platform.random/0.1.0@ -pr=linksplatform
          conan create platform.collections/all platform.collections/0.1.0@ -pr=linksplatform
          conan create platform.collections.methods/all platform.collections.methods/0.1.0@ -pr=linksplatform
          conan create platform.data/all platform.data/0.1.0@ -pr=linksplatform
          conan create platform.memory/all platform.memory/0.1.0@ -pr=linksplatform
          conan create platform.threading/all platform.threading/0.1.0@ -pr=linksplatform
          conan create platform.setters/all platform.setters/0.0.1@ -pr=linksplatform
      - name: Test C++ and scan-build
        run: |
          $CXX=clang++
          $cmake_flags="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DLINKS_PLATFORM_TESTS=TRUE"
          $cmake_build_dir="build"
          cd cpp && mkdir $cmake_build_dir && cd $cmake_build_dir
          conan install $pwd/.. -pr=linksplatform --build=missing
          cmake .. $cmake_flags
          cmake --build .
          ls

  test_rust:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: rustup toolchain install nightly
      - name: All Tests
        run: |
          cd rust
          cargo +nightly test --release -- --exact --nocapture
      - name: All Behcmarks
        run: |
          cd rust
          cargo +nightly bench
  publish_rust_windows:
    needs: [ test_rust ]
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: |
          rustup toolchain install nightly
      - name: Build
        run: |
          cd rust/ffi
          cargo +nightly build --release
      - name: publish
        shell: bash
        run: |
          export TARGET_PLATFORM="windows-x64"
          export LIB_NAME="doublets_ffi.dll"
          export TARGET_LIB_NAME="Platform.Doublets.dll"
          ./publish-bin.sh
  publish_rust_linux:
    needs: [ test_rust ]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: |
          rustup toolchain install nightly
      - name: Build
        run: |
          cd rust/ffi
          cargo +nightly build --release
      - name: publish
        run: |
          export TARGET_PLATFORM="linux-x64"
          export LIB_NAME="libdoublets_ffi.so"
          export TARGET_LIB_NAME="libPlatform.Doublets.so"
          bash ./publish-bin.sh
  publish_rust_macos:
    needs: [ test_rust ]
    if: github.event_name == 'push'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: |
          rustup toolchain install nightly
      - name: Build
        run: |
          cd rust/ffi
          cargo +nightly build --release
      - name: publish
        run: |
          export TARGET_PLATFORM="macos-x64"
          export LIB_NAME="libdoublets_ffi.dylib"
          export TARGET_LIB_NAME="libPlatform.Doublets.dylib"
          bash ./publish-bin.sh
  publish_rust_to_nuget:
    runs-on: ubuntu-latest
    needs: [ publish_rust_macos, publish_rust_linux, publish_rust_windows ]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Push
        run: |
          cd rust/ffi/nuget
          mkdir runtimes && cd runtimes
          wget https://github.com/linksplatform/Data.Doublets/raw/binaries/windows-x64/native/Platform.Doublets.dll
          wget https://github.com/linksplatform/Data.Doublets/raw/binaries/macos-x64/native/libPlatform.Doublets.dylib
          wget https://github.com/linksplatform/Data.Doublets/raw/binaries/linux-x64/native/libPlatform.Doublets.so
          ls
          cd ..

          cd ../../../
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "https://gist.githubusercontent.com/uselessgoddess/54e286dbda22935313615d65723e7670/raw/e98fe0073bf87f296786b543b8051d78f3144924/push-cpp-nuget.sh"

          CPP_PACKAGE_NUSPEC_PATH="rust/ffi/nuget/Platform.Data.Doublets.FFI.nuspec"
          echo "$CPP_PACKAGE_NUSPEC_PATH"
          echo "$CPP_PACKAGE_NUSPEC_PATH" > CPP_PACKAGE_NUSPEC_PATH.txt

          CPP_PACKAGE_VERSION="0.0.1"
          echo "$CPP_PACKAGE_VERSION"
          echo "$CPP_PACKAGE_VERSION" > CPP_PACKAGE_VERSION.txt

          bash ./push-cpp-nuget.sh
  testAndDeployRust:
    runs-on: ubuntu-latest
    needs: [publish_rust_to_nuget]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Test
      run: dotnet test -c Release -f net6
    - name: Generate PDF with CSharp code
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
        wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
        wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
        bash ./generate-csharp-pdf.sh
    - name: Publish CSharp documentation to gh-pages branch
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/docfx.json"
        wget "$SCRIPTS_BASE_URL/filter.yml"
        wget "$SCRIPTS_BASE_URL/toc.yml"
        wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
        bash ./publish-csharp-docs.sh
    - name: Read CSharp project information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
        bash ./read_csharp_package_info.sh
    - name: Publish CSharp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
        bash ./push-csharp-nuget.sh
    - name: Read Cpp package information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_cpp_package_info.sh"
        bash ./read_cpp_package_info.sh
    - name: Publish Cpp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-cpp-nuget.sh"
        bash ./push-cpp-nuget.sh
    - name: Publish release
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/publish-release.sh"
        bash ./publish-release.sh

  pushCSharpNuGetToGitHubPackageRegistry:
    needs: testAndDeploy
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: nuget/setup-nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
